// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package schema

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MsgPubsubCmd struct {
	_tab flatbuffers.Table
}

func GetRootAsMsgPubsubCmd(buf []byte, offset flatbuffers.UOffsetT) *MsgPubsubCmd {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MsgPubsubCmd{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *MsgPubsubCmd) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MsgPubsubCmd) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MsgPubsubCmd) ID() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MsgPubsubCmd) Topic() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MsgPubsubCmd) Cmd() PubsubCmd {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MsgPubsubCmd) MutateCmd(n PubsubCmd) bool {
	return rcv._tab.MutateInt8Slot(8, n)
}

func (rcv *MsgPubsubCmd) Data(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *MsgPubsubCmd) DataLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *MsgPubsubCmd) DataBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MsgPubsubCmd) MutateData(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func MsgPubsubCmdStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func MsgPubsubCmdAddID(builder *flatbuffers.Builder, ID flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(ID), 0)
}
func MsgPubsubCmdAddTopic(builder *flatbuffers.Builder, Topic flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(Topic), 0)
}
func MsgPubsubCmdAddCmd(builder *flatbuffers.Builder, Cmd int8) {
	builder.PrependInt8Slot(2, Cmd, 0)
}
func MsgPubsubCmdAddData(builder *flatbuffers.Builder, Data flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(Data), 0)
}
func MsgPubsubCmdStartDataVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func MsgPubsubCmdEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
